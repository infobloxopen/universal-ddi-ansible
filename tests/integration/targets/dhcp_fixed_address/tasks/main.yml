---
- module_defaults:
    group/infoblox.universal_ddi.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"

  block:
    # Create a random IP space name to avoid conflicts
    - ansible.builtin.set_fact:
        name: "test-fixed-address-{{ 999999 | random | string }}"

    - name: Create a Fixed Address( check mode )
      infoblox.universal_ddi.dhcp_fixed_address:
        address: "10.0.0.1"
        name: "{{ name }}"
        match_type: "mac"
        match_value: "00:00:00:00:00:00"
        ip_space: "{{ _ip_space.id }}"
        state: "present"
      check_mode: true
      register: fixed_address
    - name: Get information about the Fixed Address
      infoblox.universal_ddi.dhcp_fixed_address_info:
        filters:
          address: "10.0.0.1"
          ip_space: "{{ _ip_space.id }}"
      register: fixed_address_info
    - assert:
        that:
          - fixed_address is changed
          - fixed_address is not failed
          - fixed_address_info.objects | length == 0

    - name: Create a Fixed Address
      infoblox.universal_ddi.dhcp_fixed_address:
        address: "10.0.0.1"
        name: "{{ name }}"
        match_type: "mac"
        match_value: "00:00:00:00:00:00"
        ip_space: "{{ _ip_space.id }}"
        state: "present"
      register: fixed_address
    - name: Get information about the Fixed Address
      infoblox.universal_ddi.dhcp_fixed_address_info:
        filters:
          address: "10.0.0.1"
          ip_space: "{{ _ip_space.id }}"
      register: fixed_address_info
    - assert:
        that:
          - fixed_address_info.objects | length == 1
          - fixed_address_info.objects[0].id == fixed_address.id
          - fixed_address_info.objects[0].address == fixed_address.object.address

    - name: Create a Fixed Address (idempotent)
      infoblox.universal_ddi.dhcp_fixed_address:
        address: "10.0.0.1"
        name: "{{ name }}"
        match_type: "mac"
        match_value: "00:00:00:00:00:00"
        ip_space: "{{ _ip_space.id }}"
        state: "present"
      register: fixed_address
    - name: Get Fixed Address Info (idempotent)
      infoblox.universal_ddi.dhcp_fixed_address_info:
        filters:
          address: "10.0.0.1"
          ip_space: "{{ _ip_space.id }}"
      register: fixed_address_info
    - assert:
        that:
          - fixed_address_info.objects | length == 1
          - fixed_address_info.objects[0].id == fixed_address.id

    - name: Delete a Fixed Address ( check mode )
      infoblox.universal_ddi.dhcp_fixed_address:
        address: "10.0.0.1"
        ip_space: "{{ _ip_space.id }}"
        match_type: "mac"
        match_value: "00:00:00:00:00:00"
        state: "absent"
      check_mode: true
      register: fixed_address
    - name: Get information about the Fixed Address
      infoblox.universal_ddi.dhcp_fixed_address_info:
        filters:
          address: "10.0.0.1"
          ip_space: "{{ _ip_space.id }}"
      register: fixed_address_info
    - assert:
        that:
          - fixed_address_info.objects | length == 1

    - name: Delete a Fixed Address
      infoblox.universal_ddi.dhcp_fixed_address:
        address: "10.0.0.1"
        ip_space: "{{ _ip_space.id }}"
        match_type: "mac"
        match_value: "00:00:00:00:00:00"
        state: "absent"
      register: fixed_address
    - name: Get information about the Fixed Address
      infoblox.universal_ddi.dhcp_fixed_address_info:
        filters:
          address: "10.0.0.1"
          ip_space: "{{ _ip_space.id }}"
      register: fixed_address_info
    - assert:
        that:
          - fixed_address_info.objects | length == 0

    - name: Create a Next Available Fixed Address
      infoblox.universal_ddi.dhcp_fixed_address:
        next_available_id: "{{ _subnet.id }}"
        name: "test_next_available_fixed_address_ansible"
        match_type: "mac"
        match_value: "00:00:00:00:00:01"
        ip_space: "{{ _ip_space.id }}"
        state: "present"
      register: fixed_address
    - name: Get information about the Fixed Address
      infoblox.universal_ddi.dhcp_fixed_address_info:
        id: "{{ fixed_address.id }}"
      register: fixed_address_info
    - assert:
        that:
          - fixed_address_info.objects | length == 1
          - fixed_address_info.objects[0].id == fixed_address.id

    - name: Create a Fixed Address Match type ( mac )
      infoblox.universal_ddi.dhcp_fixed_address:
        next_available_id: "{{ _subnet.id }}"
        name: "test_client_hex_fixed_address"
        match_type: "mac"
        match_value: "00:1A:2B:3C:4D:5E"
        ip_space: "{{ _ip_space.id }}"
        state: "present"
      register: fixed_address
    - name: Get information about the Fixed Address
      infoblox.universal_ddi.dhcp_fixed_address_info:
        id: "{{ fixed_address.id }}"
      register: fixed_address_info
    - assert:
        that:
          - fixed_address_info.objects | length == 1
          - fixed_address_info.objects[0].id == fixed_address.id

    - name: Create a Fixed Address with Match type ( client_hex )
      infoblox.universal_ddi.dhcp_fixed_address:
        address: "10.0.0.1"
        name: "{{ name }}"
        match_type: "client_hex"
        match_value: "aa"
        ip_space: "{{ _ip_space.id }}"
        state: "present"
      register: fixed_address
    - name: Get information about the Fixed Address
      infoblox.universal_ddi.dhcp_fixed_address_info:
        id: "{{ fixed_address.id }}"
      register: fixed_address_info
    - assert:
        that:
          - fixed_address_info.objects | length == 1
          - fixed_address_info.objects[0].id == fixed_address.id

    - name: Create a Fixed Address with Match type ( client_text )
      infoblox.universal_ddi.dhcp_fixed_address:
        address: "10.0.0.1"
        name: "{{ name }}"
        match_type: "client_text"
        match_value: "client_text"
        ip_space: "{{ _ip_space.id }}"
        state: "present"
      register: fixed_address
    - name: Get information about the Fixed Address
      infoblox.universal_ddi.dhcp_fixed_address_info:
        id: "{{ fixed_address.id }}"
      register: fixed_address_info
    - assert:
        that:
          - fixed_address_info.objects | length == 1
          - fixed_address_info.objects[0].id == fixed_address.id

    - name: Create a Fixed Address with Match type ( relay_hex )
      infoblox.universal_ddi.dhcp_fixed_address:
        address: "10.0.0.1"
        name: "{{ name }}"
        match_type: "relay_hex"
        match_value: "aa"
        ip_space: "{{ _ip_space.id }}"
        state: "present"
      register: fixed_address_match_type
    - name: Get information about the Fixed Address
      infoblox.universal_ddi.dhcp_fixed_address_info:
        id: "{{ fixed_address.id }}"
      register: fixed_address_info
    - assert:
        that:
          - fixed_address_info.objects | length == 1
          - fixed_address_info.objects[0].id == fixed_address.id

    - name: Create a Fixed Address with Match type( relay_text )
      infoblox.universal_ddi.dhcp_fixed_address:
        address: "10.0.0.1"
        name: "{{ name }}"
        match_type: "relay_text"
        match_value: "relaytext"
        ip_space: "{{ _ip_space.id }}"
        state: "present"
      register: fixed_address
    - name: Get information about the Fixed Address
      infoblox.universal_ddi.dhcp_fixed_address_info:
        id: "{{ fixed_address.id }}"
      register: fixed_address_info
    - assert:
        that:
          - fixed_address_info.objects | length == 1
          - fixed_address_info.objects[0].id == fixed_address.id

  always:
    - name: Delete IP Space
      ansible.builtin.include_role:
        name: setup_ip_space
        tasks_from: cleanup.yml
