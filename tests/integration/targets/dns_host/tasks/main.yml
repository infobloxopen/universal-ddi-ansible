---
- module_defaults:
    group/infoblox.universal_ddi.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"
  block:
    - ansible.builtin.set_fact:
        absolute_name: "test_dns_host_name-{{ 999999 | random | string }}."
        host_display_name: "TF_TEST_HOST_01"
        host_display_name2: "TF_TEST_HOST_02"

    - name: Get Host Information
      infoblox.universal_ddi.infra_host_info:
        filters:
          display_name: "{{ host_display_name }}"
      register: infra_host_info_1

    - name: Update DNS Host (check mode)
      infoblox.universal_ddi.dns_host:
        id: "{{ infra_host_info_1.objects[0].legacy_id }}"
        server: "{{ _dns_server.id }}"
        state: present
      check_mode: true
      register: dns_host
    - name: Get DNS Host Information
      infoblox.universal_ddi.dns_host_info:
        filters:
          name: "{{ infra_host_info_1.objects[0].display_name }}"
      register: dns_host_info
    - assert:
        that:
          - dns_host is changed
          - dns_host.failed == false
          # DNS Host returns an object because the object already exists
          - dns_host_info.objects | length == 1

    - name: Update DNS Host
      infoblox.universal_ddi.dns_host:
        id: "{{ infra_host_info_1.objects[0].legacy_id }}"
        server: "{{ _dns_server.id }}"
        state: present
      register: dns_host
    - name: Get DNS Host Information
      infoblox.universal_ddi.dns_host_info:
        filters:
          name: "{{ infra_host_info_1.objects[0].display_name }}"
      register: dns_host_info
    - assert:
        that:
          - dns_host is changed
          - dns_host_info is not failed
          - dns_host_info.objects | length == 1

    - name: Update DNS Host (idempotent)
      infoblox.universal_ddi.dns_host:
        id: "{{ infra_host_info_1.objects[0].legacy_id }}"
        server: "{{ _dns_server.id }}"
        state: present
      register: dns_host
    - assert:
        that:
          - dns_host is not changed
          - dns_host is not failed

    - name: Dissociate DNS host from the server (Check Mode)
      infoblox.universal_ddi.dns_host:
        id: "{{ infra_host_info_1.objects[0].legacy_id }}"
        state: absent
      check_mode: true
      register: dns_host
    - name: Get DNS Host Information
      infoblox.universal_ddi.dns_host_info:
        filters:
          name: "{{ infra_host_info_1.objects[0].display_name }}"
      register: dns_host_info
    - assert:
        that:
          - dns_host is changed
          - dns_host_info is not failed

    - name: Dissociate DNS host from the server
      infoblox.universal_ddi.dns_host:
        id: "{{ infra_host_info_1.objects[0].legacy_id }}"
        state: absent
      register: dns_host
    - name: Get DNS Host Information
      infoblox.universal_ddi.dns_host_info:
        filters:
          name: "{{ infra_host_info_1.objects[0].display_name }}"
      register: dns_host_info
    - assert:
        that:
          - dns_host is changed
          - dns_host_info is not failed

    - name: Update absolute name for DNS Host
      infoblox.universal_ddi.dns_host:
       absolute_name: "{{ absolute_name }}_updated"
       id: "{{ infra_host_info_1.objects[0].legacy_id }}"
       server: "{{ _dns_server.id }}"
       state: present
      register: dns_host
    - name: Get DNS Host Information
      infoblox.universal_ddi.dns_host_info:
        filters:
          absolute_name: "{{ absolute_name }}_updated."
      register: dns_host_info
    - assert:
        that:
          - dns_host is changed
          - dns_host_info is not failed
          - dns_host_info.objects | length == 1
          - dns_host_info.objects[0].absolute_name == absolute_name ~ "_updated."

    - name: Get Host Information
      infoblox.universal_ddi.infra_host_info:
        filters:
          display_name: "{{ host_display_name2 }}"
      register: infra_host_info_2

    - name: Update server for DNS Host
      infoblox.universal_ddi.dns_host:
       absolute_name: "{{ absolute_name }}"
       id: "{{ infra_host_info_2.objects[0].legacy_id }}"
       server: "{{ _dns_server_2.id }}"
       state: present
      register: dns_host
    - name: Get DNS Host Information
      infoblox.universal_ddi.dns_host_info:
        filters:
          name: "{{ infra_host_info_2.objects[0].display_name }}"
      register: dns_host_info
    - assert:
        that:
          - dns_host is changed
          - dns_host_info is not failed
          - dns_host_info.objects | length == 1

  always:
    - name: "Dissociate DNS Host"
      infoblox.universal_ddi.dns_host:
        id: "{{ infra_host_info_1.objects[0].legacy_id }}"
        state: "absent"
      ignore_errors: true

    - name: "Dissociate DNS Host 2"
      infoblox.universal_ddi.dns_host:
        id: "{{ infra_host_info_2.objects[0].legacy_id }}"
        state: "absent"
      ignore_errors: true

    - name: "Clean up DNS Server"
      ansible.builtin.include_role:
        name: "setup_dns_server"
        tasks_from: cleanup.yml
