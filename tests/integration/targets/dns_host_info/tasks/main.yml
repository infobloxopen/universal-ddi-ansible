---
- module_defaults:
    group/infoblox.universal_ddi.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"
  block:
    - ansible.builtin.set_fact:
        host_display_name: "TF_TEST_HOST_01"
        absolute_name: "test_dns_host_name-{{ 999999 | random | string }}."

    - name: Get Infra Host Information
      infoblox.universal_ddi.infra_host_info:
        filters:
          display_name: "{{ host_display_name }}"
      register: infra_host_info
    - name: Assert Infra Host Exists
      assert:
        that:
          - infra_host_info is not failed
          - infra_host_info.objects | length == 1

    - name: update DNS Host
      infoblox.universal_ddi.dns_host:
        id: "{{ infra_host_info.objects[0].legacy_id }}"
        absolute_name: "{{ absolute_name }}"
        server: "{{ _dns_server.id }}"
        state: present
      register: dns_host

    - name: Get Information about the DNS Host
      infoblox.universal_ddi.dns_host_info:
        filters:
          absolute_name: "{{ absolute_name }}"
      register: dns_host_info
    - assert:
        that:
          - dns_host_info.objects | length == 1
          - dns_host_info.objects[0].absolute_name == absolute_name

    - name: Get DNS host information by filter query
      infoblox.universal_ddi.dns_host_info:
        filter_query: "absolute_name=='{{ absolute_name }}'"
      register: dns_host_info
    - assert:
        that:
          - dns_host_info.objects | length == 1
          - dns_host_info.objects[0].id == dns_host.id

  always:
    # Cleanup if the test fails
    - name: "Dissociate DNS Host"
      infoblox.universal_ddi.dns_host:
        id: "{{ infra_host_info.objects[0].legacy_id }}"
        state: "absent"
      ignore_errors: true

    - name: "Cleanup DNS Host"
      ansible.builtin.include_role:
        name: "setup_dns_server"
        tasks_from: cleanup.yml
